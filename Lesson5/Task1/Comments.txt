В приведённом коде нарушены несколько принципов SOLID:

    1) Принцип единственной ответственности (Single Responsibility Principle - SRP)

        Класс Data нарушает SRP, так как он выполняет несколько обязанностей:

            Хранение данных

            Преобразование данных в разные форматы (HTML, Text, JSON)

        Логика преобразования данных должна быть вынесена в отдельные классы.

    2) Принцип открытости/закрытости (Open/Closed Principle - OCP)

        Класс Printable и его наследник Data нарушают OCP, потому что при добавлении нового формата вывода (например, XML) потребуется:

            Добавить новый метод в базовый класс Printable (например, printAsXML()).

            Модифицировать все существующие классы-наследники, чтобы реализовать новый метод.

            Изменить функцию saveTo(), добавив новый case.

   3)  Принцип разделения интерфейса (Interface Segregation Principle - ISP)

        Интерфейс Printable нарушает ISP, так как заставляет все классы-наследники реализовывать методы для всех форматов (printAsHTML(), printAsText(), printAsJSON()), даже если они не поддерживаются.

        Например, если у нас есть класс TextData, который должен поддерживать только текстовый вывод, он всё равно вынужден реализовывать printAsHTML() и printAsJSON(), что может привести к пустым или выбрасывающим исключения методам.

        Лучше разбить интерфейс на несколько более мелких (например, IHTMLPrintable, ITextPrintable, IJSONPrintable).

    4) Принцип инверсии зависимостей (Dependency Inversion Principle - DIP) (частично)

        Класс Data зависит от конкретных реализаций вывода (прямая проверка format_ в каждом методе).

        Вместо этого логика вывода должна зависеть от абстракций (например, можно было бы внедрить стратегию форматирования через интерфейс).